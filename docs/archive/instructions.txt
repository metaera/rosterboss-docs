Redis client commands:

Base command: /usr/local/bin/redis-cli

Start server: <no parameter>
Check if server is running: ping
Monitor all traffic: monitor
Set a value: set <key> <value>
Get a value: get <key>
View all keys: keys *
Stop server: shutdown

Local install client: sudo npm install -S node-redis
Global install server: brew install redis
Redis server configuration file: /usr/local/etc/redis.conf

Start with brew: brew services restart redis
Show brew services: brew services list

Auto-start Redis on boot:

1. sudo nano /Library/LaunchDaemons/org.redis.redis-server.plist

2. Add the following:

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
  "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Label</key>
	<string>org.redis.redis-server</string>
	<key>Program</key>
	<string>/usr/local/bin/redis-server</string>
	<key>ProgramArguments</key>
	<array>
		<string>redis-server</string>
	</array>
	<key>RunAtLoad</key>
	<true/>
	<key>KeepAlive</key>
	<true/>
	<key>StandardErrorPath</key>
	<string>/var/log/redis/output.log</string>
	<key>StandardOutPath</key>
	<string>/var/log/redis/output.log</string>
</dict>
</plist>

<!----------------------------------------------------------------->

3. sudo mkdir /var/log/radius

4. sudo launchctl load /Library/LaunchDaemons/org.redis.redis-server.plist

5. sudo launchctl start org.redis.redis-server

======================================================================================================================
Node Package Management

The following will make the console user the owner of /usr/local, thereby allowing package management without SUDO...
This is safer because any malware inside of a node module will not have unfettered access to the machine

sudo chown -R $USER /usr/local

To remove this setting:

sudo chown -R root /usr/local

======================================================================================================================
Using dnsmasq

dnsmasq allows setting a custom TLD so new domains can be created at will

Installing:

> brew install dnsmasq
> cp /usr/local/opt/dnsmasq/dnsmasq.conf.example /usr/local/etc/dnsmasq.conf

To make it restart at system reboot:
> sudo cp -fv /usr/local/opt/dnsmasq/*.plist /Library/LaunchDaemons

To start it:
> sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
// NOTE: the "brew services" method does not appear to work: sudo brew services start dnsmasq

To edit the config:
> edit /usr/local/etc/dnsmasq.conf

To restart it:
> MANUAL: sudo launchctl stop homebrew.mxcl.dnsmasq; sudo launchctl start homebrew.mxcl.dnsmasq
> restart_dns (alias configured)

To stop it:
> MANUAL: sudo launchctl stop homebrew.mxcl.dnsmasq
> stop_dns (alias configured)

1. set up "resolver" by creating "priv" file in /etc/resolver, then adding "nameserver 127.0.0.1" to it.  This allows
   the OS to find the dnsmasq nameserver ONLY for the "test" TLD
2. Using "dig <hostname> @127.0.0.1 to test it's all working
3. Using "scutil --dns" to see all revolved domains

======================================================================================================================

